#!/bin/bash
#
# David Adams
# June 2018
#
#
# Script to process event data and create calibration histograms.

# DSTOPT = 0 for simple dataset processing ==> only look in DSTDIR
DSTOPT=$DUNEPROC_DSTOPT
if [ -z "$DSTOPT" ]; then
  if [ $USER = dladams ]; then
    DSTOPT=1
  else
    DSTOPT=0
  fi
fi

# Set DSTDIR.
DSTDIR=$DUNEPROC_DSTDIR
if [ -z "$DSTDIR" ]; then
  DSTDIR=$HOME/data/dune/datasets
fi

if [ "$1" = "-H" ]; then
  echo Usage: $0 FCL DSTPAT [NEVT] [NSKIP] [FLAG1 [FLAG2 ...]]
  echo "  FLAGi can be any of the following:"
  echo "       clean: Remove existing run directory and exit"
  echo "       retry: Remove existing run directory before running"
  echo "      output: Save event output"
  echo "         val: Run with valgrind log mixed with process log"
  echo "      valout: Run with valgrind logged to valgrind.out"
  echo "      valgdb: Run to memcheck error and then wait for gdb"
  echo "     valstop: Stop at first memcheck error"
  echo "       cache: Check cache for event data files"
  echo "      xrootd: Use xrootd if event data file not in cache"
  echo "    noxrootd: Use pnfs if event data file not in cache"
  echo "     pre-COM: Run script COM before starting job."
  echo
  echo Runs a lar job in a dedicated directory.
  echo
  echo FCL is the base name for the top level fcl file or a sequence
  echo of such names separated with slashes.
  echo
  echo In addition to any file on the current fcl path, these names
  echo may be any of the following:
  echo "  fembFFF - Module dataprep only processes FEMB number FFF"
  echo "  dpcr_CR - Module dataprep only processes channel range CR"
  echo "            May also be  sequence of channel ranges: CR1_CR2_CR3, etc."
  echo "  cdcr_CR - Module caldata only processes channel range CR"
  echo "  chanCCC - Module dataprep only processes channel CCC"
  echo "  fftsizeSSS - Set LArFFT size to SSS."
  echo "  winsizeSSS - Set # ticks in detector props. Used by LArFFT if its size is 0."
  echo "  wftickTTT - The channel range for waveforms drawn with tools"
  echo "              adcPlotRaw and adcPlotRaw is [TTT, TTT+1000)"
  echo "  wfrran0SSS - The signal range for these tools is (0, SSS)"
  echo "  wfrranSSS - The signal range for adcPlotRaw tools is (-SSS, SSS) around pedestal"
  echo "  wfrranSS1:SS2 - The signal range for adcPlotRaw tools is (SS1, SS2)"
  echo "  trigT - Select events with trigger index TT."
  echo "  eventEEE - Process event EEE"
  echo "  eventEE1-EE2 - Process events in range [EE1, EE2)"
  echo "  tickTTT - Tick range for channel-tick plots is [TTT, TTTT+1000)"
  echo "  tickTT1-TT2 - Tick range for channel-tick plots is [TT1, TT2)"
  echo "  roithreshTTT - Set ROI finder threshold to TTT"
  echo "  roiposTTT - Set ROI finder threshold to TTT and keep only positive ROIS"
  echo "  roinegTTT - Set ROI finder threshold to TTT and keep only negative ROIS"
  echo "  roibinsBBB_AAA - Bins before (BB) and after (AAA) for ROI finding."
  echo "  tickphasePP - Tick phase offset is PP. Should be in range (0,24)"
  echo "  tickmodPhaseFemb - Add plots of phase vs. peak to tickmod tool"
  echo "  drawTickmodMax - Add plots of tickmod ADC near max to tickmod tool"
  echo "  nroiNNN - Draw max of NNN ROI's with AdcRoiViwer (e.g. roifit.fcl)"
  echo "  roicrCCC - Use and plot channel range CCC with AdcRoiViwer (e.g. roifit.fcl)"
  echo "  roitrcVVV - Use FEMB302 tick rate correction 0.VVVVVVV (e.g. 999293). VVV=one means 1.0"
  echo "  tmitRRR-OOO - Set FEMB302 timing mitigation rate factor to RRR and offset to OOO"
  echo "  pdchtzmaxMMM - Set upper signal limit for pdcht (channel vs. tick) Z plots"
  echo "  pdchtcmaxMMM - Set upper signal limit for pdcht (channel vs. tick) C plots"
  echo "  pdchtimaxMMM - Set upper signal limit for pdcht (channel vs. tick) I plots"
  echo "  pdchtamaxMMM - Set upper signal limit for pdcht (channel vs. tick) Z, C and I plots"
  echo "  pdchtrebinRR - Set rebin to RR for protDUNE cht (channel vs. tick) plots"
  echo "  pdchtsizexSS - Set horizontal plot size to SS pixels for protDUNE cht (channel vs. tick) plots"
  echo "  usctdecTTTT - Set USC TDecayConst to 0.TTTT"
  echo "  uscfsubFFFF - Set USC FSubConst to 0.FFFF"
  echo "  exptdecTTTT - Set ExpTailRemover decay tiome to TTTT ticks"
  echo "  dpseq_DDD_SSS - Use dataprep sequence SSS for protptype DET, i.e use data.DDD_dataprep_tools.SSS."
  echo "Some of the primary fcl files provided here:"
  echo "  run_dataprep - Run dataprep with no tools or list provided later."
  echo "  dqm - Make standard dqm plots."
  echo "  dqmw - Make standard dqm plots except channel-tick plots include all ticks."
  echo "  evtview - Make plots showing the number of FEMBs with data."
  echo "  wfRaw - Draw raw-pedestal waveforms. Use wfrran and wftick to control displayed ranges."
  echo "  wfMit - Draw raw and mitigated waveforms. Use wfrran, wfpran and wftick to control displayed ranges."
  echo
  echo "Some of the secondary fcl files provided here:"
  echo "  addChannelTickRaw - Add raw channel-tick plots to the end of dataprep"
  echo "  addChannelTickPrep - Add prepared channel-tick plots to the end of dataprep"
  echo "  addDetdispPrep - Add prepared detector display to the end of dataprep."
  echo "  alltick - Set tick range to all ticks for channel-tick and detector displays."
  echo
  echo "DSTPAT is DST, DST/DSTFCL, DST_SEL or DST_SEL/DSTFCL"
  echo "The list of input files is taken from DST.txt in the directory tree"
  echo "  $DSTDIR."
  echo "Change or set DUNEPROC_DSTDIR to specify the search directory."
  echo "If that file is not present and DST has the form DDD-RRR-EEE, then only event EEE"
  echo "from raw data run RRR with run type alias DDD will be processed."
  echo "To see the mapping of run types to aliases:"
  echo "> findRunFiles runtypes"
  if [ $DSTOPT -eq 1 ]; then
    echo "After that, if DST matches SSS_runRRR_evtsEE1-EE2, the file list is retrieved from:"
    echo "  $HOME/data/dune/SSS/run_slices/files/runRRRRRR_evtsEEEEE1-EEEEE2_files.txt"
    echo "If SEL is provided, only files containing the pattern SEL are processed."
  fi
  echo "If DSTFCL is provided, it is appended to the FCLPATH."
  exit 0
fi

FCLPATH=run
NEVT=0
SEVT=    # # events to proc padded with zeroes
NSKP=0   # # events to skip
SSKP=    # # events to skip padded with zeroes
OUTPUT=0
VALOPT=
CLEAN=
RETRY=
EXTRAS=
PRECOMS=()
if [ -n "$1" -a -n "$2" ]; then
  FCLPATH=$1
  RUNDIR=$1/$2
  IDST=$(echo $2 | sed 's#/.*##g')
  DSTFCL=$(echo $2 | grep / | sed 's#.*/##')
  if [ -n "$DSTFCL" ]; then
    FCLPATH=$FCLPATH/$DSTFCL
  fi
else
  echo Usage: $0 FCL DST [NEVT] [NSKIP] [OPT]
  echo "Use option -H for details"
  exit 0
fi
if [ -n "$3" -a "$3" != "." ]; then
  if [ "$3" -eq "$3" ] 2>/dev/null; then
    NEVT=$3
  else
    EXTRAS="$EXTRAS $3"
  fi
fi
if [ $NEVT -gt 0 ]; then
  SEVT=$NEVT
  while [ ${#SEVT} -lt 6 ]; do SEVT=0$SEVT; done
  RUNDIR=${RUNDIR}_proc$SEVT
fi
if [ -n "$4" -a "$4" != "." ]; then
  if [ "$4" -eq "$4" ] 2>/dev/null; then
    NSKP=$4
    SSKP=$4
    while [ ${#SSKP} -lt 6 ]; do SSKP=0$SSKP; done
    RUNDIR=${RUNDIR}_skip$SSKP
  else
    EXTRAS="$EXTRAS $4"
  fi
fi
USEXROOTD=true
USEXCACHE=false
for ARG in $EXTRAS $5 $6; do
  if   [ $ARG = clean ]; then CLEAN=true
  elif [ $ARG = retry ]; then RETRY=true
  elif [ $ARG = output ]; then OUTPUT=1
  elif [ $ARG = val ]; then VALOPT=val
  elif [ $ARG = valout ]; then VALOPT=valout
  elif [ $ARG = valgdb ]; then VALOPT=valgdb
  elif [ $ARG = valstop ]; then VALOPT=valstop
  elif [ $ARG = xrootd ]; then USEXROOTD=true
  elif [ $ARG = cache ]; then USECACHE=true
  elif [ $ARG = noxrootd ]; then USEXROOTD=
  elif [ ${ARG:0:4} = pre- ]; then PRECOMS+=($(pwd)/${ARG:4})
  else
    echo "Invalid flag: $ARG"
    exit 1
  fi
done
FDST=$IDST
RUNSUF=
DSTPAT=
RAWINFILELIST=
EXTRAFCL=                  # Fcl derived fron run specifier
RAWINFILELIST=$(find $DSTDIR -name $FDST.txt)
DREARR=($(echo $IDST | sed 's/-/ /g'))
DREFIL=
DREOFF=
# First check for dataset file in DSTDIR.
if [ -n "$RAWINFILELIST" ]; then
  echo Processing input file list: $RAWINFILELIST
# Next check if this is a single event request: DDD-RRR-EEE
elif [ ${#DREARR[*]} = 3 ]; then
  DREDET=${DREARR[0]}
  DRERUN=${DREARR[1]}
  DREEVT=${DREARR[2]}
  ERRFIL=$(mktemp)
  read DREFIL DREOFF <<< $(findRunFiles ${DREARR[*]} 2>$ERRFIL)
  ERRMSG="$(cat $ERRFIL)"
  rm $ERRFIL
  if [ -n "$ERRMSG" ]; then
    echo Single event request $IDST failed: $ERRMSG
    exit 1
  else
    echo Processing $DREDET event $DREEVT in file $DREFIL using offset $DREOFF
    NSKP=$DREOFF
    NEVT=1
  fi
elif [ $DSTOPT -ne 1 ]; then
  echo Dataset file list $FDST.txt is not found in $DSTDIR.
  echo Please add the file or change the search directory.
  exit 1
elif echo $IDST | grep evts 1>/dev/null; then
  # Input run specifier in form RRRRevtsEE-FF uses event slice input file list and
  # restricts processing to events in range [EE, FF).
  # Looking for SSS_runRRRevtsEEE1-EEE2
  EVTS=`echo $IDST | sed 's/.*_evts//'`
  FPRE=`echo $IDST | sed 's/_evts.*//'`
  FRUN=`echo $FPRE | sed 's/.*run//'`
  FSTA=`echo $FPRE | sed 's/_run.*//'`
  if [ -z $FSTA ]; then
    echo Invalid dataset specifier: $IDST
    exit 4
  fi
  echo Using event range file list for stage $FSTA.
  while [ ${#FRUN} -lt 6 ]; do FRUN=0$FRUN; done
  FEV1=${EVTS%%-*}
  FEV2=${EVTS##*-}
  while [ ${#FEV1} -lt 6 ]; do FEV1=0$FEV1; done
  while [ ${#FEV2} -lt 6 ]; do FEV2=0$FEV2; done
  RAWINFILELIST=$HOME/data/dune/$FSTA/run_slices/files/run$FRUN/${FSTA}_run${FRUN}_evts${FEV1}-${FEV2}_files.txt
  if [ ! -r $RAWINFILELIST ]; then
    echo Not found: $RAWINFILELIST
    echo Create with "duneEventFileList RUN EVT1 EVT2"
    exit 3
  fi
  EXTRAFCL=event${FEV1}-${FEV2}
  FDST=run${FDST}evts${EVTS}
# Input run specifier in form RRRR_PP means only include file that have _PP in their names.
elif echo $IDST | grep _ 1>/dev/null; then
  FDST=`echo $IDST | sed 's/_.*//'`
  while [ ${#FDST} -lt 6 ]; do FDST=0$FDST; done
  DSTPAT=`echo $IDST | sed 's/.*_/_/'`
  echo Using file pattern $DSTPAT
  if [ -n "$EVTS" ]; then
    FDST=${FDST}evts${EVTS}
  fi
# Input run specifier is just the run number.
elif [ $FDST -eq $FDST ] 2>/dev/null; then
  echo Using unadorned run number $FDST
  while [ ${#FDST} -lt 6 ]; do FDST=0$FDST; done
# Any thing else is taken to a be file name pattern indicator.
else
  echo Using data file pattern $FDST
fi
if [ -n "$VALOPT" ]; then RUNDIR=${RUNDIR}_$VALOPT; fi
if [ $OUTPUT -eq 1 ]; then RUNDIR=${RUNDIR}_output; fi
echo RUNDIR = $RUNDIR

DIR=$(echo $RUNDIR | sed 's#:#/#g')
if [ -n "$CLEAN" -o -n "$RETRY" ]; then
  echo Removing $DIR
  rm -rf $DIR
  if [ -n "$CLEAN" ]; then exit 0; fi
fi
echo Run directory: $DIR
if [ -r $DIR ]; then
  echo Run directory already exists. Remove with
  echo 'rm -rf '$DIR
  exit 1
fi
mkdir -p $DIR
SUBDIR=`pwd`
cd $DIR

INSPEC=
if [ -z "$RAWINFILELIST" ]; then
  if [ -n "DREFIL" ]; then
    RAWINFILELIST=rawinfiles.txt
    echo $DREFIL > $RAWINFILELIST
  elif [ -n "$DSTPAT" ]; then
    RAWINFILELIST=$HOME/data/dune/np04/np04_cryostat_commissioning/np04${DSTPAT}_files.txt
  else
    RAWINFILELIST=$HOME/data/dune/np04/np04_cryostat_commissioning/np04_run${FDST}_files.txt
  fi
  if [ ! -r "$RAWINFILELIST" ]; then
    echo File list not found: $RAWINFILELIST
  fi
fi
INFILELIST=infiles.txt
rm -f $INFILELIST
touch $INFILELIST
if [ -r "$RAWINFILELIST" ]; then
  echo Taking input files from $RAWINFILELIST
  for BASE in `cat $RAWINFILELIST`; do
    INFILE=
    if [ -n "$USECACHE" ]; then
      INFILE=$(findFileCache $BASE)
    fi
    if [ -z "$INFILE" ]; then
      if [ -n "$USEXROOTD" ]; then
        INFILE=$(findFileXroot $BASE)
      else
        INFILE=$(findFilePnfs $BASE)
      fi
    fi
    if [ -n "$INFILE" ]; then
      echo $INFILE >>$INFILELIST
    else
      echo File $BASE not found for dataset $FDST
      echo "  $RAWINFILELIST"
      exit 1
    fi
  done
  if [ -n "$DSTPAT" ]; then
    echo Selecting input files with pattern $DSTPAT
    mv $INFILELIST $INFILELIST.tmp
    if grep $DSTPAT $INFILELIST.tmp > $INFILELIST; then
      NFILE=`wc -l $INFILELIST`
      NFILERAW=`wc -l $RAWINFILELIST`
      echo Selected $NFILE of $NFILERAW files
    else
      echo No files selected
      exit 2
    fi
  fi
  INSPEC="-S $INFILELIST"
else
  echo Did not find file lists $RAWINFILELIST
  exit 3
fi

# Insert EXTRAFCL 2nd in the fcl list so it can be overwritten.
FCLFILE=run.fcl
FIRST=true
for NAME in `echo $FCLPATH | sed 's#/# #g'`; do
  if [ -r $SUBDIR/$NAME.fcl ]; then
    echo Copying $NAME.fcl from submission directory.
    cp $SUBDIR/$NAME.fcl .
  fi
  # Process the primary fcl.
  if [ -n "$FIRST" ]; then
    FIRST=
    if ! fcldump $NAME.fcl 2>&1 1>/dev/null; then 
      echo Primary FCL not found: $NAME.fcl
      exit 2
    fi
    echo "#include \"$NAME.fcl\"" >$FCLFILE
    # If there is extra fcl, add it here so it can be overwritten.
    if [ -z "$EXTRAFCL" ]; then continue; fi
    NAME=$EXTRAFCL
  fi
  if ! fcldump $NAME.fcl 2>&1 1>/dev/null; then 
    if ! duneprocMakeFcl $NAME; then
      echo FCL not found: $NAME.fcl
      exit 2
    fi
  fi
  echo "#include \"$NAME.fcl\"" >>$FCLFILE
done
# If the submit dir includes local.fcl or dbg.fcl, append
# copy it to the run area. In the case of local.fcl, add
# it to configuration.
for FFILE in local dbg; do
  SUBFCL=$SUBDIR/$FFILE.fcl
  if [ -r $SUBFCL ]; then
    echo Copying $SUBFCL
    cp $SUBFCL .
    echo "#include \"$FFILE.fcl\"" >>$FCLFILE
  else
    echo Not found: $SUBFCL
  fi
done

for PRECOM in ${PRECOMS[@]}; do
  echo "Executing $PRECOM"
  $PRECOM $(pwd)
done

FW_SEARCH_PATH="..:$FW_SEARCH_PATH"
FHICL_FILE_PATH=".:$SUBDIR:$FHICL_FILE_PATH"
if true; then
  if ! fcldump $FCLFILE 5 >${FCLFILE}dump 2>fcldumperr.txt; then
    echo Ignoring fcldump errors.
  fi
else
  if ! fcldump $FCLFILE 5 >${FCLFILE}dump; then
    exit 3
  fi
fi
OPTNEVT=
if [ "$NEVT" -gt 0 ]; then
  OPTNEVT="-n $NEVT"
fi
COMBASE="lar -c $FCLFILE $INSPEC $OPTNEVT --nskip $NSKP"
if [ $OUTPUT -eq 1 ]; then
  COM=$COMBASE
else
  COM="$COMBASE --no-output"
fi
VALBASE="valgrind --tool=memcheck --leak-check=no --track-origins=yes --num-callers=20 --error-limit=no --suppressions=${ROOTSYS}/etc/valgrind-root.supp"
SUPFILES="$DUNETPC_INC/valgrind_dune.sup"
for SUPFILE in $SUPFILES; do
  if [ -r $SUPFILE ]; then
    VALBASE="$VALBASE --suppressions=$SUPFILE"
  fi
done
echo $COM >run
echo $VALBASE $COM >runval
echo $VALBASE --log-file=valgrind.out $COM >runvalout
echo $VALBASE --vgdb-error=1 $COM >runvalgdb
echo $VALBASE --error-exitcode=5 --exit-on-first-error=yes $COM >runvalstop
echo 'rm -f callgrind.out' >runcallgrind
echo 'valgrind --tool=callgrind --callgrind-out-file=callgrind.out $(cat run) $COM' >>runcallgrind
echo 'callgrind_annotate --inclusive=yes --auto=yes callgrind.out >callgrind.log' >>runcallgrind
echo 'echo Callgrind results are in callgrind.log' >>runcallgrind
echo 'rm -f callgrind.out' >runcallgrindToggled
echo 'valgrind --tool=callgrind --instr-atstart=no --collect-atstart=no --callgrind-out-file=callgrind.out $(cat run) $COM' >>runcallgrindToggled
echo 'callgrind_annotate --inclusive=yes --auto=yes callgrind.out >callgrind.log' >>runcallgrindToggled
echo 'echo Callgrind results are in callgrind.log' >>runcallgrindToggled

chmod +x run
chmod +x runval
chmod +x runvalout
chmod +x runvalgdb
chmod +x runvalstop
chmod +x runcallgrind
chmod +x runcallgrindToggled
RUNCOM=./run$VALOPT
if [ $IDST != '0' ]; then
  ulimit -c unlimited
  $RUNCOM 2>&1 | tee run.log
  STAT=$?
  if [ $STAT -ne 0 ]; then
    echo "Job failed with error $STAT"
  else
    echo "Job succeeded."
  fi
  grep ERROR: run.log >errors.log
  head -10 errors.log
  echo Error count: `wc -l errors.log | awk '{print $1}'`
  grep WARNING: run.log >warnings.log
  echo Warning count: `wc -l warnings.log | awk '{print $1}'`
  head -10 warnings.log
  if [ -r valgrind.out ]; then
    tail -1 valgrind.out
  fi
fi
echo Run directory: $DIR
echo ARGS: '-c' $FCLFILE '-s' $INFILES $OPTNEVT '--nskip' $NSKP
echo Command: `cat run`
