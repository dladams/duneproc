#!/bin/bash
#
# David Adams
# October 2022
#
# Script to cretate fcl from fcl file name.

MYNAME=$(basename $0)
FCL=$1

if [ "$1" = "-H" ]; then
  echo Usage: $0 FCL
  echo FCL is the base name for  a fcl file and can be any of the following:"
  echo "  fembFFF - Module dataprep only processes FEMB number FFF"
  echo "  dpcr_CR - Module dataprep only processes channel range CR"
  echo "            May also be  sequence of channel ranges: CR1_CR2_CR3, etc."
  echo "  cdcr_CR - Module caldata only processes channel range CR"
  echo "  chanCCC - Module dataprep only processes channel CCC"
  echo "  fftsizeSSS - Set LArFFT size to SSS."
  echo "  winsizeSSS - Set # ticks in detector props. Used by LArFFT if its size is 0."
  echo "  wftickTTT - The channel range for waveforms drawn with tools"
  echo "              adcPlotRaw and adcPlotRaw is [TTT, TTT+1000)"
  echo "  wfrran0SSS - The signal range for these tools is (0, SSS)"
  echo "  wfrranSSS - The signal range for adcPlotRaw tools is (-SSS, SSS) around pedestal"
  echo "  wfrranSS1:SS2 - The signal range for adcPlotRaw tools is (SS1, SS2)"
  echo "  trigT - Select events with trigger index TT."
  echo "  eventEEE - Process event EEE"
  echo "  eventEE1-EE2 - Process events in range [EE1, EE2)"
  echo "  tickTTT - Tick range for channel-tick plots is [TTT, TTTT+1000)"
  echo "  tickTT1-TT2 - Tick range for channel-tick plots is [TT1, TT2)"
  echo "  roithreshTTT - Set ROI finder threshold to TTT"
  echo "  roiposTTT - Set ROI finder threshold to TTT and keep only positive ROIS"
  echo "  roinegTTT - Set ROI finder threshold to TTT and keep only negative ROIS"
  echo "  roibinsBBB_AAA - Bins before (BB) and after (AAA) for ROI finding."
  echo "  tickphasePP - Tick phase offset is PP. Should be in range (0,24)"
  echo "  tickmodPhaseFemb - Add plots of phase vs. peak to tickmod tool"
  echo "  drawTickmodMax - Add plots of tickmod ADC near max to tickmod tool"
  echo "  nroiNNN - Draw max of NNN ROI's with AdcRoiViwer (e.g. roifit.fcl)"
  echo "  roicrCCC - Use and plot channel range CCC with AdcRoiViwer (e.g. roifit.fcl)"
  echo "  roitrcVVV - Use FEMB302 tick rate correction 0.VVVVVVV (e.g. 999293). VVV=one means 1.0"
  echo "  tmitRRR-OOO - Set FEMB302 timing mitigation rate factor to RRR and offset to OOO"
  echo "  pdchtzmaxMMM - Set upper signal limit for pdcht (channel vs. tick) Z plots"
  echo "  pdchtcmaxMMM - Set upper signal limit for pdcht (channel vs. tick) C plots"
  echo "  pdchtimaxMMM - Set upper signal limit for pdcht (channel vs. tick) I plots"
  echo "  pdchtamaxMMM - Set upper signal limit for pdcht (channel vs. tick) Z, C and I plots"
  echo "  pdchtrebinRR - Set rebin to RR for protDUNE cht (channel vs. tick) plots"
  echo "  pdchtsizexSS - Set horizontal plot size to SS pixels for protDUNE cht (channel vs. tick) plots"
  echo "  usctdecTTTT - Set USC TDecayConst to 0.TTTT"
  echo "  uscfsubFFFF - Set USC FSubConst to 0.FFFF"
  echo "  exptdecTTTT - Set ExpTailRemover decay tiome to TTTT ticks"
  echo "  dpseq_DDD_SSS - Use dataprep sequence SSS for protptype DET, i.e use data.DDD_dataprep_tools.SSS."
  exit 0
fi

if [ -n "$FCL" ]; then
  FCLNAME=$1
  FCLFILE=$FCLNAME.fcl
  DBG=0
  REM=
  DET=
  POS=
  SEQ=
  if  test $DBG -gt 0; then echo $MYNAME: FCL file is $FCLFILE; fi
  if [ -r $FCLFILE ]; then
    echo $MYNAME: File already exists: $FCLFILE
    exit 2
  fi
  # Copy from submit directory.
  if [ -r $SUBDIR/$FCLNAME.fcl ]; then
    echo $MYNAME: Copying $FCLNAME.fcl from submission directry.
    cp $SUBDIR/$FCLNAME.fcl .
  # Run dataprep for a single FEMB identified by number.
  elif [ ${FCLNAME:0:4} = femb ]; then
    NUM=${FCLNAME:4}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "physics.producers.dataprep.KeepFembs: [$NUM]" >$FCLFILE
  # Run dataprep for a single channel range indentified by name.
  elif [ ${FCLNAME:0:5} = dpcr_ ]; then    # data prep channel ranges
    CRS=`echo ${FCLNAME:5} | sed 's/_/, /g'`
    echo "physics.producers.dataprep.ChannelGroups: [${CRS}]" >$FCLFILE
    echo "physics.producers.dataprepsim.ChannelRanges: [${CRS}]" >>$FCLFILE
    for TOOL in adcRoiViewer adcRoiFitter; do
      echo "tools.$TOOL.ChannelRanges: [${CRS}]" >>$FCLFILE
      if [ ${FCLNAME:5:3} = "apa" -o ${FCLNAME:5:3} = "tps" ]; then
        echo "tools.$TOOL.ChannelLineModulus: 2560" >>$FCLFILE
        echo "tools.$TOOL.ChannelLinePattern: [" >>$FCLFILE
        echo "    0,   40,   80,  120,  160,  200,  240,  280,  320,  360,  400,  440,  480,  520,  560,  600,  640,  680,  720,  760," >>$FCLFILE
        echo "  800,  840,  880,  920,  960, 1000, 1040, 1080, 1120, 1160, 1200, 1240, 1280, 1320, 1360, 1400, 1440, 1480, 1520, 1560," >>$FCLFILE
        echo " 1600, 1648, 1696, 1744, 1792, 1840, 1888, 1936, 1984, 2032," >>$FCLFILE
        echo " 2080, 2128, 2176, 2224, 2272, 2320, 2368, 2416, 2464, 2512]" >>$FCLFILE
      fi
      if [ ${FCLNAME:5:4} = "femb" ]; then
        VIEW=${FCLNAME:12:1}
        if [ "$VIEW" = u -o "$VIEW" = v ]; then
          #echo Induction view in $FCLNAME
          echo "tools.$TOOL.ChannelLineModulus: 10" >>$FCLFILE
        elif [ "$VIEW" = x ]; then
          echo Collection view in $FCLNAME
          echo "tools.$TOOL.ChannelLineModulus: 2560" >>$FCLFILE
          echo "tools.$TOOL.ChannelLinePattern: [" >>$FCLFILE
          echo "  1600, 1612, 1624, 1636, 1648, 1660, 1672, 1684, 1696, 1708, 1720, 1732, 1744, 1756, 1768, 1780," >>$FCLFILE
          echo "  1792, 1804, 1816, 1828, 1840, 1852, 1864, 1876, 1888, 1900, 1912, 1924, 1936, 1948, 1960, 1972,"  >>$FCLFILE
          echo "  1984, 1996, 2008, 2020, 2032, 2044, 2056, 2068, 2080, 2092, 2104, 2116, 2128, 2140, 2152, 2164," >>$FCLFILE 
          echo "  2176, 2188, 2200, 2212, 2224, 2236, 2248, 2260, 2272, 2284, 2296, 2308, 2320, 2332, 2344, 2356," >>$FCLFILE
          echo "  2368, 2380, 2392, 2404, 2416, 2428, 2440, 2452, 2464, 2476, 2488, 2500, 2512, 2524, 2536, 2548, 2560]" >>$FCLFILE
        else
          echo Invalid view in $FCLNAME
          exit 5
        fi
      fi
    done
  # Run caldata for a single channel range indentified by name.
  elif [ ${FCLNAME:0:5} = cdcr_ ]; then    # data prep channel ranges
    CRS=`echo ${FCLNAME:5} | sed 's/_/, /g'`
    echo "physics.producers.caldata.ChannelRanges: [${CRS}]" >$FCLFILE
  elif [ ${FCLNAME:0:4} = chan ]; then
    NUM=${FCLNAME:4}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "physics.producers.dataprep.KeepChannelBegin: $NUM" >$FCLFILE
    echo "physics.producers.dataprep.KeepChannelEnd: $((NUM+1))" >>$FCLFILE
    echo "physics.producers.dataprep.KeepChannels: [$NUM]" >>$FCLFILE
  # FFT size
  elif [ ${FCLNAME:0:7} = fftsize ]; then
    SIZE=${FCLNAME:7}
    echo "services.LArFFT.FFTSize: $SIZE" >>$FCLFILE
  # Detector window size.
  elif [ ${FCLNAME:0:7} = winsize ]; then
    SIZE=${FCLNAME:7}
    echo "services.DetectorPropertiesService.ReadOutWindowSize: $SIZE" >>$FCLFILE
  # wftickTTT: Show waveform ticks from TTT to TTT+1000
  elif [ ${FCLNAME:0:6} = wftick -a ${#FCLNAME} -gt 6 ]; then
    NUM1=${FCLNAME:6}
    while [ ${NUM1:0:1} = 0 -a ${#NUM1} -gt 1 ]; do NUM1=${NUM1:1}; done
    NUM2=$((NUM1+1000))
    echo "tools.adcPlotRaw.PlotSamMin: $NUM1" >>$FCLFILE
    echo "tools.adcPlotRaw.PlotSamMax: $NUM2" >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSamMin: $NUM1" >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSamMax: $NUM2" >>$FCLFILE
  # wfran0SSS: Show waveforms signals from 0 to SSS
  elif [ ${FCLNAME:0:6} = wfran0 -a ${#FCLNAME} -gt 6 ]; then
    MAX=${FCLNAME:6}
    echo "tools.adcPlotRaw.PlotSigMin: 0"     >>$FCLFILE
    echo "tools.adcPlotRaw.PlotSigMax:  $MAX" >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSigMin: 0"     >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSigMax:  $MAX" >>$FCLFILE
  # wfrranSSS: Show raw waveforms signals from -SSS to SSS around pedestal
  # wfrranSS1:SS2: Show raw waveforms signals from SS1 to SS2
  elif [ ${FCLNAME:0:6} = wfrran -a ${#FCLNAME} -gt 6 ]; then
    REM=${FCLNAME:6}
    MAX=$(echo $REM | sed 's/.*://g')
    if [ $MAX = $REM ]; then    # wfrranSSS
      MIN="-$MAX"
      OPT=pedestal
    else
      MIN=$(echo $REM | sed 's/:.*//g')
      OPT=fixed
    fi
    echo "tools.adcPlotRaw.PlotSigMin: $MIN" >>$FCLFILE
    echo "tools.adcPlotRaw.PlotSigMax: $MAX" >>$FCLFILE
    echo "tools.adcPlotRaw.PlotSigOpt: $OPT" >>$FCLFILE
  # wfpranSSS: Show prepared waveforms signals from -SSS to SSS
  # wfpranSS1:SS2: Show prepared waveforms signals from SS1 to SS2
  elif [ ${FCLNAME:0:6} = wfpran -a ${#FCLNAME} -gt 6 ]; then
    REM=${FCLNAME:6}
    MAX=$(echo $REM | sed 's/.*://g')
    if [ $MAX = $REM ]; then    # wfrranSSS
      MIN="-$MAX"
    else
      MIN=$(echo $REM | sed 's/:.*//g')
    fi
    echo "tools.adcPlotPrepared.PlotSigMin: $MIN" >>$FCLFILE
    echo "tools.adcPlotPrepared.PlotSigMax: $MAX" >>$FCLFILE
  elif [ ${FCLNAME:0:4} = trig ]; then
    NUM=${FCLNAME:4}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "physics.filters.trigfilter.TimingFlagSelectList: [$NUM]" >$FCLFILE
  elif [ ${FCLNAME:0:5} = event ]; then
    RAN=${FCLNAME:5}  # I or I-J
    FNUM1=${RAN%%-*}
    NUM1=$FNUM1
    while [ ${NUM1:0:1} = 0 -a ${#NUM1} -gt 1 ]; do NUM1=${NUM1:1}; done
    if [ $FNUM1 = $RAN ]; then
      NUM2=$((NUM1+1))
    else
      NUM2=${RAN##*-}
    fi
    while [ ${NUM2:0:1} = 0 -a ${#NUM2} -gt 1 ]; do NUM2=${NUM2:1}; done
    touch $FCLFILE
    #echo "physics.filters.eventfilter.EventBegin: $NUM1" >>$FCLFILE
    #echo "physics.filters.eventfilter.EventEnd: $NUM2" >>$FCLFILE
    echo "tools.jobRanges.events.begin: $NUM1" >>$FCLFILE
    echo "tools.jobRanges.events.end:   $NUM2" >>$FCLFILE
    touch events.fcl      # So input file string won't override
  # Set tick offset phase.
  elif [ ${FCLNAME:0:9} = tickphase ]; then
    NUM=${FCLNAME:9}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "tools.pd_tickOffset.TpcTickPhase: $NUM" >$FCLFILE
    echo "tools.pd_tickOffsetCorr.TpcTickPhase: $NUM" >$FCLFILE
  # Set tick range for channel-tick plots, e.g. tick1000 or tick1000-1500
  elif [ ${FCLNAME:0:4} = tick ]; then
    RAN=${FCLNAME:4}  # I or I-J
    NUM1=${RAN%%-*}
    if [ $NUM1 = $RAN ]; then
      NUM2=$((NUM1+1000))
    else
      NUM2=${RAN##*-}
    fi
    while [ ${NUM1:0:1} = 0 -a ${#NUM1} -gt 1 ]; do NUM1=${NUM1:1}; done
    while [ ${NUM2:0:1} = 0 -a ${#NUM2} -gt 1 ]; do NUM2=${NUM2:1}; done
    echo "tools.tickRanges.plotTicks.begin: $NUM1" >$FCLFILE
    echo "tools.tickRanges.plotTicks.end:   $NUM2" >>$FCLFILE
  # ADC ROI threshold
  elif [ ${FCLNAME:0:9} = roithresh ]; then
    NUM=${FCLNAME:9}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 -a ${NUM:1:1} != "." ]; do NUM=${NUM:1}; done
    echo "#include \"addThresholdSignalFinder.fcl\"" >$FCLFILE
    echo "tools.adcThresholdSignalFinder.Threshold: $NUM" >>$FCLFILE
  # ADC ROI bins before and after
  elif [ ${FCLNAME:0:7} = roibins ]; then
    NUMS=${FCLNAME:7}
    NUMB=`echo $NUMS | sed 's/_.*//g'`
    NUMA=`echo $NUMS | sed 's/.*_//g'`
    while [ ${NUMB:0:1} = 0 -a ${#NUMB} -gt 1 ]; do NUMB=${NUMB:1}; done
    while [ ${NUMA:0:1} = 0 -a ${#NUMA} -gt 1 ]; do NUMA=${NUMA:1}; done
    echo "tools.adcThresholdSignalFinder.BinsBefore: $NUMB" >$FCLFILE
    echo "tools.adcThresholdSignalFinder.BinsAfter: $NUMA" >$FCLFILE
  # Positive ROIs.
  elif [ ${FCLNAME:0:6} = roipos ]; then
    echo "tools.adcThresholdSignalFinder.FlagPositive: true" >$FCLFILE
    echo "tools.adcThresholdSignalFinder.FlagNegative: false" >>$FCLFILE
    echo "tools.adcRoiFitter.SumNegate: false" >>$FCLFILE
    echo "tools.adcRoiFitter.SumNegate: false" >>$FCLFILE
    echo "tools.adcRoiFitter.PlotLabels: [\"Q>0\"]" >>$FCLFILE
    NUM=${FCLNAME:6}
    if [ -n "$NUM" ]; then
      while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
      echo "tools.adcThresholdSignalFinder.Threshold: $NUM" >>$FCLFILE
    fi
  # Negative ROIs.
  elif [ ${FCLNAME:0:6} = roineg ]; then
    echo "tools.adcThresholdSignalFinder.FlagPositive: false" >$FCLFILE
    echo "tools.adcThresholdSignalFinder.FlagNegative: true" >>$FCLFILE
    echo "tools.adcRoiFitter.SumNegate: true" >>$FCLFILE
    echo "tools.adcRoiFitter.PlotLabels: [\"Q<0\"]" >>$FCLFILE
    NUM=${FCLNAME:6}
    if [ -n "$NUM" ]; then
      while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
      echo "tools.adcThresholdSignalFinder.Threshold: $NUM" >>$FCLFILE
    fi
  # # ROIs to draw with ROI fitter.
  elif [ ${FCLNAME:0:4} = "nroi" ]; then
    NROI=${FCLNAME:4}
    echo "tools.adcRoiFitter.MaxRoiPlots: $NROI" >$FCLFILE
    echo "tools.adcRoiViewer.MaxRoiPlots: $NROI" >>$FCLFILE
  # Channel range for ROI fitter.
  elif [ ${FCLNAME:0:5} = "roicr" ]; then
    CR=${FCLNAME:5}
    echo "physics.producers.dataprep.ChannelRanges: [${CR}]" >$FCLFILE
    echo "tools.adcRoiFitter.ChannelRanges: [$CR]" >>$FCLFILE
  elif [ ${FCLNAME:0:6} = "roitrc" ]; then
    VVV=${FCLNAME:6}
    if [ $VVV = one ]; then
      COR=1.0
    else
      COR=0.$VVV
    fi
    echo "tools.pd_tickOffsetCorr.FembScaleValues: [${COR}]" >$FCLFILE
  elif [ ${FCLNAME:0:4} = "tmit" ]; then
    VALS=${FCLNAME:4}  # RRR-OOO
    NUM1=${VALS%%-*}
    NUM2=${VALS##*-}
    echo "tools.pdsp_timingMitigate.SamplingRatio: $NUM1" >$FCLFILE
    echo "tools.pdsp_timingMitigate.SamplingOffset: $NUM2" >>$FCLFILE
  elif [ ${FCLNAME:0:5} = "pdcht" -a ${FCLNAME:6:3} = "max" ]; then
    IPL=${FCLNAME:5:1}
    NUM=${FCLNAME:9}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    touch $FCLFILE
    if [ $IPL = a -o $IPL = z ]; then
      echo "tools.pdcht_Apa3z.MaxSignal: $NUM"    >>$FCLFILE
      echo "tools.pdcht_Apas.MaxSignal: $NUM"     >>$FCLFILE
      echo "tools.pdcht_Zplanes.MaxSignal: $NUM"  >>$FCLFILE
      echo "tools.pdchtp_Apa3z.MaxSignal: $NUM"   >>$FCLFILE
      echo "tools.pdchtp_Apas.MaxSignal: $NUM"    >>$FCLFILE
      echo "tools.pdchtp_Zplanes.MaxSignal: $NUM" >>$FCLFILE
    fi
    if [ $IPL = a -o $IPL = c ]; then
      echo "tools.pdcht_Apa3c.MaxSignal: $NUM"    >>$FCLFILE
      echo "tools.pdcht_Cplanes.MaxSignal: $NUM"  >>$FCLFILE
      echo "tools.pdchtp_Apa3c.MaxSignal: $NUM"   >>$FCLFILE
      echo "tools.pdchtp_Cplanes.MaxSignal: $NUM" >>$FCLFILE
    fi
    if [ $IPL = a -o $IPL = i ]; then
      echo "tools.pdcht_Apa3u.MaxSignal: $NUM"    >>$FCLFILE
      echo "tools.pdcht_Apa3v.MaxSignal: $NUM"    >>$FCLFILE
      echo "tools.pdcht_Iplanes.MaxSignal: $NUM"  >>$FCLFILE
      echo "tools.pdchtp_Apa3u.MaxSignal: $NUM"   >>$FCLFILE
      echo "tools.pdchtp_Apa3v.MaxSignal: $NUM"   >>$FCLFILE
      echo "tools.pdchtp_Iplanes.MaxSignal: $NUM" >>$FCLFILE
    fi
  elif [ ${FCLNAME:0:10} = "pdchtrebin" ]; then
    NUM=${FCLNAME:10}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "tools.pdcht_Apa3z.TickRebin: $NUM"     >$FCLFILE
    echo "tools.pdcht_Apas.TickRebin: $NUM"     >>$FCLFILE
    echo "tools.pdcht_Zplanes.TickRebin: $NUM"  >>$FCLFILE
    echo "tools.pdcht_Cplanes.TickRebin: $NUM"  >>$FCLFILE
    echo "tools.pdcht_Iplanes.TickRebin: $NUM"  >>$FCLFILE
    echo "tools.pdchtp_Apa3z.TickRebin: $NUM"   >>$FCLFILE
    echo "tools.pdchtp_Apas.TickRebin: $NUM"    >>$FCLFILE
    echo "tools.pdchtp_Zplanes.TickRebin: $NUM" >>$FCLFILE
    echo "tools.pdchtp_Cplanes.TickRebin: $NUM" >>$FCLFILE
    echo "tools.pdchtp_Iplanes.TickRebin: $NUM" >>$FCLFILE
  elif [ ${FCLNAME:0:10} = "pdchtsizex" ]; then
    NUM=${FCLNAME:10}
    while [ ${NUM:0:1} = 0 -a ${#NUM} -gt 1 ]; do NUM=${NUM:1}; done
    echo "tools.pdcht_Apa3z.PlotSizeX: $NUM"     >$FCLFILE
    echo "tools.pdcht_Apas.PlotSizeX: $NUM"     >>$FCLFILE
    echo "tools.pdcht_Zplanes.PlotSizeX: $NUM"  >>$FCLFILE
    echo "tools.pdcht_Cplanes.PlotSizeX: $NUM"  >>$FCLFILE
    echo "tools.pdcht_Iplanes.PlotSizeX: $NUM"  >>$FCLFILE
    echo "tools.pdchtp_Apa3z.PlotSizeX: $NUM"   >>$FCLFILE
    echo "tools.pdchtp_Apas.PlotSizeX: $NUM"    >>$FCLFILE
    echo "tools.pdchtp_Zplanes.PlotSizeX: $NUM" >>$FCLFILE
    echo "tools.pdchtp_Cplanes.PlotSizeX: $NUM" >>$FCLFILE
    echo "tools.pdchtp_Iplanes.PlotSizeX: $NUM" >>$FCLFILE
  elif [ ${FCLNAME:0:7} = "usctdec" ]; then
    VAL=0.${FCLNAME:7}
    echo "tools.adcCorrectUndershootAdc.TDecayConst:  [ $VAL, $VAL, $VAL ]" >$FCLFILE
    echo "tools.adcCorrectUndershootKe.TDecayConst:   [ $VAL, $VAL, $VAL ]" >>$FCLFILE
    echo "tools.adcCorrectUndershoot.TDecayConst:     [ $VAL, $VAL, $VAL ]" >>$FCLFILE
  elif [ ${FCLNAME:0:7} = "uscfsub" ]; then
    VAL=0.${FCLNAME:7}
    echo "tools.adcCorrectUndershootAdc.FSubConst:  [ $VAL, $VAL, $VAL ]" >$FCLFILE
    echo "tools.adcCorrectUndershootKe.FSubConst:   [ $VAL, $VAL, $VAL ]" >>$FCLFILE
    echo "tools.adcCorrectUndershoot.FSubConst:     [ $VAL, $VAL, $VAL ]" >>$FCLFILE
  elif [ ${FCLNAME:0:7} = "exptdec" ]; then
    VAL=${FCLNAME:7}
    echo "tools.adcTailRemovalAdc.DecayTime: $VAL" >$FCLFILE
    echo "tools.adcTailRemovalKe.DecayTime: $VAL" >>$FCLFILE
  elif [ ${FCLNAME:0:6} = "dpseq_" ]; then
    REM=${FCLNAME:6}
    DET=${REM%%_*}
    POS=${#DET}
    SEQ=${REM:$POS}
    SEQ=${SEQ:1}
    echo "services.RawDigitPrepService.ToolNames: @local::data.${DET}_dataprep_seqs.$SEQ" >$FCLFILE
  fi
  if [ ! -r $FCLFILE ]; then
    echo $MYNAME: Unable to create $FCLFILE
    exit 1
  fi
  echo $MYNAME: Created $FCLFILE
else
  echo $MYNAME: FCL base name must be provided.
fi
