#!/bin/bash
#
# duneEventFileList
#
# David Adams
# June 2019
#
# Generate a list of physical files for a range of events in a protoDUNE run.

RUN=$1
EV1=$2
EV2=$3
EV3=$4
OPT=$5
STAGE=
MAXFILE=0
if [ -z "$EV3" ]; then
  EV3=0
elif [ $EV3 = stage ]; then
  EV3=0
  STAGE=true
fi

REMOVE=
if [ -n "$OPT" ]; then
  if [ $OPT = stage ]; then STAGE=true
  elif [ $OPT = remove ]; then REMOVE=true
  else
    echo Invalid option: $OPT
    exit 1
  fi
fi

if [ -z "$EV2" -o "$RUN" = "-h" ]; then
  echo Usage: $0 RUN EV1 EV2 EV3 OPT
  echo "Generates the list of files containing events in range [EV1, EV2) for run RUN"
  echo "or groups of EV3 events if EV3 > 0"
  echo "If OPT is stage, stage the dataset"
  exit 0
fi

if [ $EV3 -gt 0 ]; then
  echo "Building multiple file lists for run $RUN with event count $EV3 for [$EV1, $EV2)"
  EVA=$EV1
  NEV=$EV3
  COUNT=0
  LINE="----------------------------------------------------------------------------"
  echo
  echo $LINE
  echo
  while true; do
    EVB=$(( $EVA + $NEV ))
    if [ $EV2 -gt 0 -a $EVB -gt $EV2 ]; then break; fi
    $0 $RUN $EVA $EVB 0 $MAXFILE
    EVA=$EVB
    COUNT=$(( $COUNT + 1 ))
    echo
    echo $LINE
    echo
  done
  echo
  echo File list count for run $RUN is $COUNT
  exit 0
fi

echo "Building file list for run $RUN events [$EV1, $EV2)"

if ! type samweb 2>&1 >/dev/null; then
  echo Cannot find samweb. Set up dunetpc.
  exit 1
fi

# Pad numbers with zeros.
FRUN=$RUN
while [ ${#FRUN} -lt 6 ]; do FRUN=0$FRUN; done
FEV1=$EV1
while [ ${#FEV1} -lt 6 ]; do FEV1=0$FEV1; done
FEV2=$EV2
while [ ${#FEV2} -lt 6 ]; do FEV2=0$FEV2; done

# Find sorted list of matching files in sam.
QUERY="data_tier raw and DUNE_data.is_fake_data 0 and run_number $RUN and last_event >= $EV1"
if [ $EV2 -gt 0 ]; then
  QUERY="$QUERY and first_event < $EV2"
fi
#NAMES=`samweb list-files data_tier=raw | grep ^np04_raw_run$FRUN | sed 's/_dl/|/g' | sort | sort -t'|' -k1,1 -k2,2n | sed 's/|/_dl/g'`
echo Making file query: $QUERY
NAMES=`samweb list-files "$QUERY" | sed 's/_dl/|/g' | sort | sort -t'|' -k1,1 -k2,2n | sed 's/|/_dl/g'`
RAWCOUNT=0
for NAME in $NAMES; do
  ((++RAWCOUNT))
done
if [ $RAWCOUNT -eq 0 ]; then
  echo No files found.
  exit 2
fi
echo Raw file count: $RAWCOUNT

LISTDIR=$HOME/data/dune/np04/run_slices/files/run$FRUN
if [ ! -r $LISTDIR ]; then mkdir $LISTDIR; fi
LISTFILE=$LISTDIR/np04_run${FRUN}_evts${FEV1}-${FEV2}_files.txt
SKIPDIR=$HOME/data/dune/np04/run_slices/skips/run$FRUN
if [ ! -r $SKIPDIR ]; then mkdir $SKIPDIR; fi
SKIPFILE=$SKIPDIR/np04_run${FRUN}evts${FEV1}-${FEV2}_skips.txt
if [ -n "$REMOVE" ]; then
  echo Removing dataset.
  for FILE in $LISTFILE $SKIPFILE; do
    if [ -r $FILE ]; then
      echo Removing $FILE
      rm $FILE
    else
      echo Not found: $FILE
    fi
  done
  exit 0
fi
if [ -r $LISTFILE ]; then
  echo Run file list already exists.
else
  # Find physical files.
  rm -f $LISTFILE
  rm -f $SKIPFILE
  touch $LISTFILE
  touch $SKIPFILE
  echo Fetching file locations
  COUNT=0
  for NAME in $NAMES; do
    echo "  $NAME"
    LINE=`findFileProtodune $NAME | tail -1`
    if [ "${LINE:0:11}" = "FNAL file: " ]; then
      FILE=${LINE:11}
      echo $FILE >>$LISTFILE
      ((++COUNT))
      if [ $MAXFILE -gt 0 -a $COUNT -ge $MAXFILE ]; then
        echo Stopping at $COUNT files
        break
      fi
    else
      echo $NAME >>$SKIPFILE
    fi
  done
fi
   
echo
echo "List file: $LISTFILE"
echo "Skip file: $SKIPFILE"
NFILE=`wc -l $LISTFILE | sed 's/ .*//g'`
NSKIP=`wc -l $SKIPFILE | sed 's/ .*//g'`
echo
echo "   Raw file count: $RAWCOUNT"
echo "   # files listed: $NFILE"
echo "  # files missing: $NSKIP"
echo
DSNAME=dladams_np04_run${FRUN}_evts${FEV1}-${FEV2}
if [ -n "$STAGE" ]; then
  samweb create-definition $DSNAME $QUERY
  samweb prestage-dataset --defname $DSNAME
else
  echo To build and stage dataset:
  echo "samweb create-definition $DSNAME \"$QUERY\""
  echo "samweb prestage-dataset --defname $DSNAME"
fi

#echo $NAMES | sort -k2 -n
#samweb list-files data_tier=raw | grep ^np04_raw_run$FRUN | sort -t_dl -k2 -n
